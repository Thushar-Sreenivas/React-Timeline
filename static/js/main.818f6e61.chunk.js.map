{"version":3,"sources":["Components/UI/TimelineShow.js","Components/UI/RadioInput.js","Components/Timeline.js","Components/UI/TimelineDisplay.js","App.js","serviceWorker.js","index.js"],"names":["TimelineShow","event","mode","style","marginTop","RadioInput","props","Group","onChange","e","target","value","marginBottom","color","Display","events","useState","setMode","displayUI","userEventActivity","userEventDetails","userEventArray","map","index","date","moment","ts","format","push","time","text","key","TimelineEvent","dates","Object","keys","className","classes","card","newMode","type","shape","size","Item","label","console","log","useStyles","makeStyles","root","minWidth","margin","backgroundColor","fontFamily","textAlign","width","height","borderRadius","boxShadow","cursor","transition","transform","SimpleCard","Card","CardContent","font","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.818f6e61.chunk.js","sourcesContent":["import React from 'react'\nimport { Timeline } from 'antd';\n\nfunction TimelineShow({event, mode}) {\n\n  return (\n    <div style={{marginTop: '20px'}}>\n      <Timeline mode={mode}>\n          {event}\n      </Timeline>\n    </div>\n  );\n}\n\nexport default TimelineShow\n\n","import React from 'react'\nimport { Radio } from 'antd';\n\nfunction RadioInput(props) {\n//   const [mode, setMode] = useState('left');\n\n  const onChange = e => {\n    props.onChange(e.target.value);\n  };\n\n  return (\n    <div>\n      <Radio.Group\n        onChange={onChange}\n        value={props.value}\n        style={{\n          marginBottom: 20,\n          \n        }}\n      >\n        <Radio style={{color: 'white'}} value=\"left\">Left</Radio>\n        <Radio style={{color: 'white'}} value=\"right\">Right</Radio>\n        <Radio style={{color: 'white'}} value=\"alternate\">Alternate</Radio>\n      </Radio.Group>\n      </div>\n  );\n}\n\nexport default RadioInput","import React from 'react'\nimport { useState } from 'react';\nimport moment from 'moment'\nimport 'antd/dist/antd.css';\nimport TimelineShow from './UI/TimelineShow'\nimport { Timeline, Button } from 'antd';\nimport RadioInput from './UI/RadioInput';\nimport classes from '../Components/Timeline.css'\n\nconst TimelineEvent = (events) => {\n    let userEventDetails = {};\n    let userEventArray = []\n        events.map((event, index) => {\n            let date = moment(event.ts).format(\"DD MMM YYYY\");\n            userEventArray = userEventDetails[date] || [];\n            userEventArray.push({\n                time: moment(event.ts).format('HH mm'),\n                text: event.text,\n                key: index                \n            })\n            userEventDetails[date] = userEventArray\n        })\n    return userEventDetails\n}\n    \n    export default function Display({events}) {\n    const [mode, setMode] = useState('left');\n    function handleChange(newMode) {\n        setMode(newMode);\n      }\n    \n    let displayUI = []\n    const userEventActivity = TimelineEvent(events)\n    const dates = Object.keys(userEventActivity)\n    return (\n        <div className={classes.card}>\n            <RadioInput value={mode} onChange={handleChange}/>\n            {dates.map(date => (\n            <div key={date} >\n                <Button style={{color: 'white'}} type=\"primary\" shape=\"round\" size=\"large\" >{date}</Button>\n                <br></br>\n                {userEventActivity[date].map(event => {\n                displayUI.push(<Timeline.Item style={{color: 'white'}}\n                    label={event.time}\n                    key={event.key}>{event.text}</Timeline.Item>)\n                })}\n                <TimelineShow event={displayUI} key={date} mode={mode}/>\n                {console.log(displayUI = [])}\n            </div>\n            ))}\n        </div>\n    )\n    \n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TimelineEvent from '../Timeline'\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    \n  },\n  \n  card: {\n    margin: '30px auto',\n    backgroundColor: '#181A1B',\n    fontFamily: 'Roboto, sans-serif',\n    textAlign: 'center',\n    width: '450px',\n    height: 'auto',\n    borderRadius: '40px',\n    boxShadow: '5px 5px 30px 7px rgba(0,0,0,0.25), -5px -5px 30px 7px rgba(0,0,0,0.22)',\n    cursor: 'pointer',\n    transition: '0.4s',\n    '&:hover': {\n    transform: 'scale(0.9, 0.9)',\n    boxShadow: '5px 5px 30px 15px rgba(0,0,0,0.25), -5px -5px 30px 15px rgba(0,0,0,0.22)'\n  },\n}\n});\nconst events = [\n  { ts: \"2017-09-17T12:22:46.587Z\", text: \"Logged in\" },\n  { ts: \"2017-09-17T12:21:46.587Z\", text: \"Clicked Home Page\" },\n  { ts: \"2017-09-17T12:20:46.587Z\", text: \"Edited Profile\" },\n  { ts: \"2017-09-16T12:22:46.587Z\", text: \"Registered\" },\n  { ts: \"2017-09-16T12:21:46.587Z\", text: \"Clicked Cart\" },\n  { ts: \"2017-09-16T12:21:46.587Z\", text: \"Clicked Cart\" },\n  { ts: \"2017-09-16T12:20:46.587Z\", text: \"Clicked Checkout\" }\n];\nexport default function SimpleCard() {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.card}>\n      <TimelineEvent events={events} className={classes.font}/>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport './App.css';\nimport SimpleCard from './Components/UI/TimelineDisplay';\n\n\nfunction App() {\n  return (\n    <div>\n      <SimpleCard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}